<?php

declare(strict_types=1);

namespace Kkguan\PHPMapstruct\Processor\Internal\Model\Common;

class ReflectionParameter extends \ReflectionParameter
{
    private const BUILT_IN_TYPES = ['int' => null, 'float' => null, 'string' => null, 'bool' => null, 'callable' => null, 'self' => null, 'parent' => null, 'array' => null, 'iterable' => null, 'object' => null, 'void' => null, 'mixed' => null, 'static' => null];

    private static \ReflectionParameter $reflectionParameter;

    public function __construct(\ReflectionParameter $reflectionParameter)
    {
        self::$reflectionParameter = $reflectionParameter;
    }

    public function getName()
    {
        return self::$reflectionParameter->getName();
    }

    public function allowsNull(): bool
    {
        return self::$reflectionParameter->allowsNull();
    }

    public function isPassedByReference()
    {
        return self::$reflectionParameter->isPassedByReference(); // TODO: Change the autogenerated stub
    }

    public function canBePassedByValue(): bool
    {
        return self::$reflectionParameter->canBePassedByValue();
    }

    public function getDeclaringFunction(): ReflectionFunctionAbstract
    {
        return self::$reflectionParameter->getDeclaringFunction();
    }

    public function getDeclaringClass(): ?ReflectionClass
    {
        return self::$reflectionParameter->getDeclaringClass();
    }

    public function getClass(): ?ReflectionClass
    {
        return self::$reflectionParameter->getClass();
    }

    public function hasType(): bool
    {
        return self::$reflectionParameter->hasType();
    }

    public function isArray(): bool
    {
        return self::$reflectionParameter->isArray();
    }

    public function isCallable(): bool
    {
        return self::$reflectionParameter->isCallable();
    }

    public function getPosition(): int
    {
        return self::$reflectionParameter->getPosition();
    }

    public function isOptional(): bool
    {
        return self::$reflectionParameter->isOptional();
    }

    public function isDefaultValueAvailable(): bool
    {
        return self::$reflectionParameter->isDefaultValueAvailable();
    }

    public function getDefaultValue(): mixed
    {
        return self::$reflectionParameter->getDefaultValue();
    }

    public function isDefaultValueConstant(): bool
    {
        return self::$reflectionParameter->isDefaultValueConstant();
    }

    public function getDefaultValueConstantName(): ?string
    {
        return self::$reflectionParameter->getDefaultValueConstantName();
    }

    public function isVariadic(): bool
    {
        return self::$reflectionParameter->isVariadic();
    }

    public function isPromoted(): bool
    {
        return self::$reflectionParameter->isPromoted();
    }

    /**
     * @template T
     *
     * Returns an array of parameter attributes.
     *
     * @param null|class-string<T> $name Name of an attribute class
     * @param int $flags —Åriteria by which the attribute is searched
     * @return ReflectionAttribute<T>[]
     * @since 8.0
     */
    #[Pure]
    public function getAttributes(?string $name = null, int $flags = 0): array
    {
    }

    public function getType()
    {
        $type = self::$reflectionParameter->getType();
        if (empty($type)) {
            return new ReflectionType('mixed', true);
        }
        return $type;
    }
}
